# HG changeset patch
# Parent  20318e34a0fa99d5fee4921a6dd386677cdd2d7c

diff -r 20318e34a0fa src/intro_gui.cpp
--- a/src/intro_gui.cpp	Wed Jan 21 21:08:31 2015 +0000
+++ b/src/intro_gui.cpp	Wed Jan 21 22:59:28 2015 +0000
@@ -31,14 +31,51 @@
 #include "highscore.h"
 
 #include "widgets/intro_widget.h"
+#include "widgets/dropdown_type.h"
+#include "widgets/dropdown_func.h"
 
 #include "table/strings.h"
 #include "table/sprites.h"
 
+#include "network/network_func.h" //Required to connect to a server
+#include "window_func.h" //deletewindowbyID
+#include "console_func.h" //IConsolePrintF
+#include "settings_func.h" //saveconfig
+//#include "nc_intro_gui.h"
+
 #include "safeguards.h"
 
+////////////////////////XXX
+void ShowSelectGameWindow();
+////////////////////////XXX
+void ReDraw()
+{
+	DeleteWindowByClass(WC_SELECT_GAME);
+	ShowSelectGameWindow();	
+}
 struct SelectGameWindow : public Window {
+	
+	DropDownList *BuildDropDownList(int widget, int *selected_index) const
+	{
+		DropDownList *list = NULL;
+		switch (widget) 
+		{
+			case WID_NC_COMMUNITY_DROPDOWN:
+				list = new DropDownList();
+				*selected_index = CSettings::get().Selected();
+				for (int i = 0; i < CSettings::get().Size(); i++) {
+					*list->Append() = new DropDownListCharStringItem(CSettings::get().GetCommunityName(i), i, false);
+				}
+			break;
+			//case:
+			//break
+			default:
+			break;
+		}
+		return list;
+	}
 
+	SelectGameQuery query_widget;
 	SelectGameWindow(WindowDesc *desc) : Window(desc)
 	{
 		this->CreateNestedTree();
@@ -64,6 +101,13 @@
 	{
 		bool missing = _current_language->missing >= _settings_client.gui.missing_strings_threshold && !IsReleasedVersion();
 		this->GetWidget<NWidgetStacked>(WID_SGI_TRANSLATION_SELECTION)->SetDisplayedPlane(missing ? 0 : SZSP_NONE);
+		CSettings::get().RegistToWait(&ReDraw);
+	}
+	
+	virtual void OnPaint()
+	{
+		//this->DisableWidget(WID_NC_ORDER);
+		this->DrawWidgets();
 	}
 
 	virtual void DrawWidget(const Rect &r, int widget) const
@@ -73,9 +117,34 @@
 				SetDParam(0, _current_language->missing);
 				DrawStringMultiLine(r.left, r.right, r.top,  r.bottom, STR_INTRO_TRANSLATION, TC_FROMSTRING, SA_CENTER);
 				break;
+			//case WID_NC_COMMUNITY_DROPDOWN:
+			//	DrawString(r.left, r.right, r.top + 3, STR_NULL, TC_FROMSTRING, SA_CENTER);
+			//	break;
+			default:
+				Community* selected = CSettings::get().GetSelected();
+				ServerList* list = selected->GetServerList();
+				if(list == NULL) return;
+				if(selected == NULL) break;
+				if(widget >= WID_NC_LIST && widget <= WID_NC_LIST_END)
+				{
+					SetDParamStr(0, list->Get(widget - WID_NC_LIST)->display_name);
+					DrawString(r.left, r.right, r.top + 3, STR_JUST_RAW_STRING, TC_BLACK, SA_CENTER);
+				}
+				break;
 		}
 	}
-
+	virtual void SetStringParameters(int widget) const
+	{
+		switch(widget)
+		{
+			case WID_NC_HEADER:
+				SetDParamStr(0, CSettings::get().GetSelected()->display_name);
+			break;
+			case WID_NC_COMMUNITY_DROPDOWN:   
+				SetDParamStr(0, CSettings::get().GetSelected()->display_name); 
+			break;
+		}
+	}
 	virtual void UpdateWidgetSize(int widget, Dimension *size, const Dimension &padding, Dimension *fill, Dimension *resize)
 	{
 		switch (widget) {
@@ -95,7 +164,16 @@
 			}
 		}
 	}
-
+	virtual void OnDropdownSelect(int widget, int index)
+	{
+		switch (widget) {
+			case WID_NC_COMMUNITY_DROPDOWN:
+				CSettings::get().SetSelected(index);
+				DeleteWindowByClass(WC_SELECT_GAME);
+				ShowSelectGameWindow();	
+			break;
+		}
+	}
 	virtual void OnClick(Point pt, int widget, int click_count)
 	{
 #ifdef ENABLE_NETWORK
@@ -103,7 +181,7 @@
 		 * creation/load windows for the network server. */
 		if (IsInsideMM(widget, WID_SGI_GENERATE_GAME, WID_SGI_EDIT_SCENARIO + 1)) _is_network_server = false;
 #endif /* ENABLE_NETWORK */
-
+		extern void OpenBrowser(const char *url);
 		switch (widget) {
 			case WID_SGI_GENERATE_GAME:
 				if (_ctrl_pressed) {
@@ -144,10 +222,68 @@
 				break;
 			case WID_SGI_AI_SETTINGS:     ShowAIConfigWindow(); break;
 			case WID_SGI_EXIT:            HandleExitGameRequest(); break;
+			//community stuff
+			case WID_NC_ACCOUNT:
+				//ShowAccountMenu();
+			break;
+			case WID_NC_LINKS:
+				//ShowUsefulLinksList();
+			break;
+			default:
+				Community* selected = CSettings::get().GetSelected();
+				ServerList* list = selected->GetServerList();
+				if(widget >= WID_NC_LIST && widget <= WID_NC_LIST_END && list != NULL)
+				{
+					printf("Clicked\n");
+					if (_ctrl_pressed) {
+						NetworkClientConnectGame(list->Get(widget - WID_NC_LIST)->ipv4, COMPANY_NEW_COMPANY);
+					}
+					else{
+						NetworkClientConnectGame(list->Get(widget - WID_NC_LIST)->ipv4, COMPANY_SPECTATOR);
+					}
+				}else if(widget == WID_NC_COMMUNITY_DROPDOWN)
+				{
+					int selected;
+					DropDownList *list = this->BuildDropDownList(widget, &selected);
+					if (list != NULL) {
+						ShowDropDownList(this, list, selected, widget);
+					}
+				}
+			break;
 		}
 	}
 };
-
+NWidgetBase *MakeServerButtons(int *biggest_index)
+{
+	Community* selected = CSettings::get().GetSelected();
+	ServerList* list = selected->GetServerList();
+	
+	NWidgetVertical *ver = new NWidgetVertical;
+	
+	if(list == NULL || list->Size() == 0)
+	{
+		NWidgetBackground *leaf = new NWidgetBackground(WWT_PANEL, COLOUR_BROWN, WID_NC_SERVERS, NULL);
+		ver->Add(leaf);
+		return ver;
+	}
+	int line_counter = 0;
+	NWidgetHorizontal *hor = new NWidgetHorizontal;
+	for(uint s = 0; s < list->Size(); s++,line_counter++)
+	{
+		if ( line_counter%5 == 0 && line_counter>0) 
+		{
+			ver->Add(hor);
+			hor = new NWidgetHorizontal();
+		}
+		NWidgetLeaf *leaf = new NWidgetLeaf(WWT_PUSHTXTBTN, COLOUR_ORANGE, WID_NC_LIST + s, 0x0,STR_NULL);
+		leaf->SetMinimalSize(75, 15);
+		leaf->SetPadding(3,2,0,2);
+		hor->Add(leaf);
+	}
+	ver->Add(hor);
+	*biggest_index = (WID_NC_LIST - 1) + list->Size();	
+	return ver;
+}
 static const NWidgetPart _nested_select_game_widgets[] = {
 	NWidget(WWT_CAPTION, COLOUR_BROWN), SetDataTip(STR_INTRO_CAPTION, STR_NULL),
 	NWidget(WWT_PANEL, COLOUR_BROWN),
@@ -248,6 +384,18 @@
 	NWidget(NWID_SPACER), SetMinimalSize(0, 8),
 
 	EndContainer(),
+	NWidget(WWT_CAPTION, COLOUR_BROWN, WID_NC_HEADER), SetDataTip(STR_JUST_RAW_STRING, STR_NULL),
+	NWidget(WWT_PANEL, COLOUR_BROWN),
+	NWidget(NWID_HORIZONTAL, NC_EQUALSIZE), SetFill(1, 0),SetPadding(4),
+	NWidget(WWT_DROPDOWN, COLOUR_WHITE, WID_NC_COMMUNITY_DROPDOWN), SetDataTip(STR_BLACK_RAW_STRING, STR_NULL),SetFill(1, 0),SetPadding(4),
+	//NWidget(WWT_DROPDOWN, COLOUR_WHITE, WID_NC_GROUP_DROPDOWN),SetDataTip(STR_BLACK_RAW_STRING, STR_NULL),SetFill(1, 0),SetPadding(4),
+	EndContainer(),
+	NWidgetFunction(MakeServerButtons),
+	NWidget(WWT_PANEL, COLOUR_BROWN),
+	NWidget(NWID_HORIZONTAL, NC_EQUALSIZE),SetPadding(10,10,5,10),
+		NWidget(WWT_PUSHTXTBTN, COLOUR_ORANGE,WID_NC_ACCOUNT),SetDataTip(STR_NC_INTRO_ACCOUNT_DETAILS,STR_NULL), SetMinimalSize(158,15),SetFill(1,0),
+		NWidget(WWT_PUSHTXTBTN, COLOUR_ORANGE,WID_NC_LINKS), SetDataTip(STR_NC_INTRO_LINKS,STR_NULL), SetMinimalSize(158,15),SetFill(1,0),
+	EndContainer(),
 };
 
 static WindowDesc _select_game_desc(
diff -r 20318e34a0fa src/lang/english.txt
--- a/src/lang/english.txt	Wed Jan 21 21:08:31 2015 +0000
+++ b/src/lang/english.txt	Wed Jan 21 22:59:28 2015 +0000
@@ -5029,3 +5029,36 @@
 
 # Town gui extended
 STR_TOWN_VIEW_GROWTH                                            :{BLACK}GR: {ORANGE}{COMMA}{BLACK} next: {ORANGE}{COMMA} {BLACK} RH: {ORANGE}{COMMA} {BLACK}flag {ORANGE}{COMMA}  {BLACK}Fund: {ORANGE}{COMMA}{SILVER}m
+
+# intro gui
+STR_NC_INTRO_ACCOUNT_DETAILS                                    :{BLACK}Account details
+STR_NC_INTRO_LINKS                                              :{BLACK}Useful links
+STR_CC_ACCOUNT_DETAILS_CAPTION                                  :{BLACK}{STRING}'s Account Details
+STR_CC_LINKS_CAPTION                                            :{BLACK}{STRING}'s Useful Links
+
+STR_CC_USER                                                     :{WHITE}Username:{NBSP}{NBSP}
+STR_CC_PASSWORD                                                 :{WHITE}Password:{NBSP}{NBSP}
+STR_CC_SET                                                      :{WHITE}Set...
+STR_CC_REGULAR_USER                                             :{BLACK}Regular User Account:
+STR_CC_ADMIN_USER                                               :{BLACK}Admin User Account:
+STR_CC_USER_DIALOG                                              :{BLACK}Your Username:
+STR_CC_AUSER_DIALOG                                             :{BLACK}Your Admin Username:
+STR_CC_PASSWORD_DIALOG                                          :{BLACK}Your Password:
+STR_CC_APASSWORD_DIALOG                                         :{BLACK}Your Admin Password:
+STR_CC_PASSWORD_SET                                             :saved
+STR_CC_PASSWORD_EMPTY                                           :EMPTY
+STR_CC_CURRENT_NICK                                             :{WHITE}{RAW_STRING}
+STR_CC_BLACK_RAW                                                :{BLACK}{RAW_STRING}
+STR_CC_BLACK_STRING                                             :{BLACK}{STRING}
+STR_CC_WEBSITE                                                  :{WHITE}{STRING}'s Main Website
+STR_CC_WEBSITE_DESC                                             :{BLACK}Here you can find the latest news about the community.
+STR_CC_FORUM                                                    :{WHITE}{STRING}'s Forum
+STR_CC_FORUM_DESC                                               :{BLACK}Here you can interact with the others users, discuss the game and give us feedback!
+STR_CC_WIKI                                                     :{WHITE}{STRING}'s Wiki
+STR_CC_WIKI_DESC                                                :{BLACK}Here you can find, errr, things?
+STR_CC_RULES                                                    :{WHITE}Rules
+STR_CC_RULES_DESC                                               :{BLACK}{STRING}'s servers rules.
+STR_CC_SERVERS                                                  :{WHITE}{STRING}'s Servers List
+STR_CC_SERVERS_DESC                                             :{BLACK}Here you can find the server list and its state!
+STR_CC_CONTACTS                                                 :{WHITE}Contacts
+STR_CC_CONTACTS_DESC                                            :{BLACK}If you need to reach {STRING}'s admins, try here!
diff -r 20318e34a0fa src/nc_intro_gui.cpp
--- /dev/null	Thu Jan 01 00:00:00 1970 +0000
+++ b/src/nc_intro_gui.cpp	Wed Jan 21 22:59:28 2015 +0000
@@ -0,0 +1,309 @@
+#include "comc_intro_gui.h"
+#include "strings_func.h"
+#include "settings_type.h"
+#include "table/strings.h"
+#include "error.h"
+#include "rev.h"
+#include "settings_func.h" //saveconfig
+#include "textbuf_gui.h"
+#include "stdafx.h"
+
+#include "network/network.h"
+#include "network/network_func.h"
+#include "network/network_base.h"
+#include "network/network_type.h"
+
+#include "strings_func.h"
+
+#include "window_gui.h"
+#include "widget_type.h"
+#include "window_func.h"
+/******
+	Intro Gui Support Windows
+*/
+/*
+	ACCOUNT
+*/
+enum AccountMenuWidgets
+{
+	WID_AM_CAPTION,
+	WID_AM_USER,
+	WID_AM_USER_SET,
+	WID_AM_PASSWORD,
+	WID_AM_PASSWORD_SET,
+	WID_AM_AUSER,
+	WID_AM_AUSER_SET,
+	WID_AM_APASSWORD,
+	WID_AM_APASSWORD_SET,
+};
+class AccountMenuGui : public Window
+{
+	AccountMenuWidgets last_query;
+	public:
+	AccountMenuGui(WindowDesc *desc, int window_number) : Window(desc)
+	{
+		this->InitNested(window_number);
+	}
+	virtual void DrawWidget(const Rect &r, int widget) const
+	{
+	}
+	virtual void SetStringParameters(int widget) const
+	{
+		switch (widget) 
+		{
+			default:
+			break;
+		}
+	}
+	virtual void OnClick(Point pt, int widget, int click_count)
+	{
+		switch (widget)
+		{
+			default:
+			break;
+		}
+	}
+	virtual void OnQueryTextFinished(char *str) 
+	{ 
+	}	
+};
+static const NWidgetPart _nested_account_menu_widgets[] = {
+	NWidget(NWID_HORIZONTAL),
+		NWidget(WWT_CLOSEBOX, COLOUR_BROWN),
+		NWidget(WWT_CAPTION, COLOUR_BROWN,WID_AM_CAPTION), SetDataTip(STR_CC_ACCOUNT_DETAILS_CAPTION , STR_NULL),
+	EndContainer(),
+	NWidget(WWT_PANEL, COLOUR_GREY),
+	NWidget(NWID_VERTICAL),SetPadding(5),
+		NWidget(WWT_TEXT,COLOUR_ORANGE),SetDataTip(STR_CC_REGULAR_USER,STR_NULL),
+		NWidget(NWID_HORIZONTAL),SetPadding(0,0,0,20),
+			NWidget(WWT_TEXT,COLOUR_ORANGE),SetDataTip(STR_CC_USER,STR_NULL),
+			NWidget(WWT_TEXT,COLOUR_ORANGE,WID_AM_USER),SetDataTip(STR_CC_BLACK_RAW,STR_NULL),
+			NWidget(NWID_SPACER),SetFill(1,0),SetMinimalSize(200,0),
+			NWidget(WWT_PUSHTXTBTN,COLOUR_BROWN,WID_AM_USER_SET),SetDataTip(STR_CC_SET,STR_NULL),
+		EndContainer(),
+		NWidget(NWID_HORIZONTAL),SetPadding(5,0,0,20),
+			NWidget(WWT_TEXT,COLOUR_ORANGE),SetDataTip(STR_CC_PASSWORD,STR_NULL),
+			NWidget(WWT_TEXT,COLOUR_ORANGE,WID_AM_PASSWORD),SetDataTip(STR_CC_BLACK_STRING,STR_NULL),
+			NWidget(NWID_SPACER),SetFill(1,0),SetMinimalSize(200,0),
+			NWidget(WWT_PUSHTXTBTN,COLOUR_BROWN,WID_AM_PASSWORD_SET),SetDataTip(STR_CC_SET,STR_NULL),
+		EndContainer(),
+	EndContainer(),
+	NWidget(WWT_PANEL, COLOUR_GREY),SetFill(1,0),
+	NWidget(NWID_VERTICAL),SetPadding(5),
+		NWidget(WWT_TEXT,COLOUR_ORANGE),SetDataTip(STR_CC_ADMIN_USER,STR_NULL),
+		NWidget(NWID_HORIZONTAL),SetPadding(0,0,0,20),
+			NWidget(WWT_TEXT,COLOUR_ORANGE),SetDataTip(STR_CC_USER,STR_NULL),
+			NWidget(WWT_TEXT,COLOUR_ORANGE,WID_AM_AUSER),SetDataTip(STR_CC_BLACK_RAW,STR_NULL),
+			NWidget(NWID_SPACER),SetFill(1,0),SetMinimalSize(200,0),
+			NWidget(WWT_PUSHTXTBTN,COLOUR_BROWN,WID_AM_AUSER_SET),SetDataTip(STR_CC_SET,STR_NULL),
+		EndContainer(),
+		NWidget(NWID_HORIZONTAL),SetPadding(5,0,0,20),
+			NWidget(WWT_TEXT,COLOUR_ORANGE),SetDataTip(STR_CC_PASSWORD,STR_NULL),
+			NWidget(WWT_TEXT,COLOUR_ORANGE,WID_AM_APASSWORD),SetDataTip(STR_CC_BLACK_STRING,STR_NULL),
+			NWidget(NWID_SPACER),SetFill(1,0),SetMinimalSize(200,0),
+			NWidget(WWT_PUSHTXTBTN,COLOUR_BROWN,WID_AM_APASSWORD_SET),SetDataTip(STR_CC_SET,STR_NULL),
+		EndContainer(),
+	EndContainer(),
+};
+static WindowDesc _account_menu_desc(
+	WDP_CENTER, NULL, 0, 0,
+	WC_CC_ACCOUNT_MENU, WC_NONE,
+	0,
+	_nested_account_menu_widgets, lengthof(_nested_account_menu_widgets)
+);
+
+void ShowAccountMenu()
+{
+	AllocateWindowDescFront<AccountMenuGui>(&_account_menu_desc, 0);
+}
+/*
+	LINKS
+*/
+enum LinksListWidgets
+{
+	WID_LL_CAPTION,
+	WID_LL_WEBSITE,
+	WID_LL_WEBSITE_TXT,
+	WID_LL_FORUM,
+	WID_LL_FORUM_TXT,
+	WID_LL_WIKI,
+	WID_LL_WIKI_TXT,
+	WID_LL_RULES,
+	WID_LL_RULES_TXT,
+	WID_LL_SERVERS,
+	WID_LL_SERVERS_TXT,
+	WID_LL_CONTACTS,
+	WID_LL_CONTACTS_TXT,	
+};
+class LinksListGui : public Window
+{
+	public:
+	LinksListGui(WindowDesc *desc, int window_number) : Window(desc)
+	{
+		this->InitNested(window_number);
+	}
+	virtual void DrawWidget(const Rect &r, int widget) const
+	{
+	}
+	virtual void OnClick(Point pt, int widget, int click_count)
+	{
+		extern void OpenBrowser(const char *url);
+		switch(widget)
+		{
+			case WID_LL_WEBSITE:
+				if(_settings_client.gui.community == Community::N_ICE)
+					OpenBrowser("http://www.n-ice.org/openttd");
+				else
+					OpenBrowser("http://openttd.btpro.nl");
+			break;
+	      case WID_LL_FORUM:
+				if(_settings_client.gui.community == Community::N_ICE)
+					OpenBrowser("http://www.n-ice.org/openttd/forum/index.php");
+				else
+					OpenBrowser("http://openttd.btpro.nl/index.php/forum/index");
+	      break;
+	      case WID_LL_WIKI:
+				if(_settings_client.gui.community == Community::N_ICE)
+					OpenBrowser("http://wiki.x-base.org/wakka.php?wakka=OpenTTD/Rules");
+				else
+					OpenBrowser("http://openttd.btpro.nl/wiki/index.php/Main_Page");
+	      break;
+			case WID_LL_RULES:
+				if(_settings_client.gui.community == Community::N_ICE)
+					OpenBrowser("http://n-ice.org/openttd/rules.php");
+				else
+					OpenBrowser("http://openttd.btpro.nl/index.php/forum/11-server-rules/10-server-rules");
+			break;
+	      case WID_LL_SERVERS:
+				if(_settings_client.gui.community == Community::N_ICE)
+					OpenBrowser("http://openttd.n-ice.org/servers.php");
+				else
+					OpenBrowser("http://openttd.btpro.nl/index.php?option=com_content&view=article&id=79&Itemid=514");
+			break;
+	      case WID_LL_CONTACTS:	
+				if(_settings_client.gui.community == Community::N_ICE)
+					OpenBrowser("http://openttd.n-ice.org/contact.php");
+				else
+					OpenBrowser("http://openttd.btpro.nl/index.php?option=com_content&view=article&id=102&Itemid=560");
+			break;
+			default:
+			break;
+		}
+	}
+	
+	virtual void SetStringParameters(int widget) const
+	{
+		switch (widget) 
+		{
+			case WID_LL_CAPTION:
+			{
+				if(_settings_client.gui.community == Community::N_ICE)
+					SetDParam(0,STR_CC_COMMUNITY_NICE);
+				else
+					SetDParam(0,STR_CC_COMMUNITY_BTPRO);
+			}
+			break;
+			case WID_LL_WEBSITE:
+				if(_settings_client.gui.community == Community::N_ICE)
+					SetDParam(0,STR_CC_COMMUNITY_NICE);
+				else
+					SetDParam(0,STR_CC_COMMUNITY_BTPRO);
+			break;
+	      case WID_LL_FORUM:
+				if(_settings_client.gui.community == Community::N_ICE)
+					SetDParam(0,STR_CC_COMMUNITY_NICE);
+				else
+					SetDParam(0,STR_CC_COMMUNITY_BTPRO);
+	      break;
+	      case WID_LL_WIKI:
+				if(_settings_client.gui.community == Community::N_ICE)
+					SetDParam(0,STR_CC_COMMUNITY_NICE);
+				else
+					SetDParam(0,STR_CC_COMMUNITY_BTPRO);
+	      break;
+	      case WID_LL_WIKI_TXT:
+				if(_settings_client.gui.community == Community::N_ICE)
+					SetDParam(0,STR_CC_COMMUNITY_NICE);
+				else
+					SetDParam(0,STR_CC_COMMUNITY_BTPRO);
+	      break;
+			case WID_LL_RULES_TXT:
+				if(_settings_client.gui.community == Community::N_ICE)
+					SetDParam(0,STR_CC_COMMUNITY_NICE);
+				else
+					SetDParam(0,STR_CC_COMMUNITY_BTPRO);
+			break;
+	      case WID_LL_SERVERS:
+				if(_settings_client.gui.community == Community::N_ICE)
+					SetDParam(0,STR_CC_COMMUNITY_NICE);
+				else
+					SetDParam(0,STR_CC_COMMUNITY_BTPRO);
+			break;
+	      case WID_LL_CONTACTS_TXT:	
+				if(_settings_client.gui.community == Community::N_ICE)
+					SetDParam(0,STR_CC_COMMUNITY_NICE);
+				else
+					SetDParam(0,STR_CC_COMMUNITY_BTPRO);
+			break;
+			default:
+			break;
+		}
+	}
+	
+};
+static const NWidgetPart _nested_links_list_widgets[] = {
+	NWidget(NWID_HORIZONTAL),
+		NWidget(WWT_CLOSEBOX, COLOUR_BROWN),
+		NWidget(WWT_CAPTION, COLOUR_BROWN,WID_LL_CAPTION), SetDataTip(STR_CC_LINKS_CAPTION, STR_NULL),
+	EndContainer(),
+	NWidget(WWT_PANEL, COLOUR_GREY),
+	NWidget(NWID_VERTICAL),SetPadding(7),
+		NWidget(NWID_HORIZONTAL),
+			NWidget(WWT_TEXTBTN,COLOUR_BROWN,WID_LL_WEBSITE),SetDataTip(STR_CC_WEBSITE,STR_NULL),SetPadding(5),SetMinimalSize(0,20),
+			NWidget(NWID_SPACER),SetFill(0,1),
+		EndContainer(),
+		NWidget(WWT_TEXT,COLOUR_BEGIN,WID_LL_WEBSITE_TXT),SetDataTip(STR_CC_WEBSITE_DESC,STR_NULL),SetPadding(0,0,0,15),
+		NWidget(NWID_SPACER),SetMinimalSize(0,6),SetFill(1,0),
+		NWidget(NWID_HORIZONTAL),
+			NWidget(WWT_TEXTBTN,COLOUR_BROWN,WID_LL_FORUM),SetDataTip(STR_CC_FORUM,STR_NULL),SetPadding(5),SetMinimalSize(0,20),
+			NWidget(NWID_SPACER),SetFill(0,1),
+		EndContainer(),
+		NWidget(WWT_TEXT,COLOUR_BEGIN,WID_LL_FORUM_TXT),SetDataTip(STR_CC_FORUM_DESC,STR_NULL),SetPadding(0,0,0,15),
+		NWidget(NWID_SPACER),SetMinimalSize(0,6),SetFill(1,0),
+		NWidget(NWID_HORIZONTAL),
+			NWidget(WWT_TEXTBTN,COLOUR_BROWN,WID_LL_WIKI),SetDataTip(STR_CC_WIKI,STR_NULL),SetPadding(5),SetMinimalSize(0,20),
+			NWidget(NWID_SPACER),SetFill(0,1),
+		EndContainer(),
+		NWidget(WWT_TEXT,COLOUR_BEGIN,WID_LL_WIKI_TXT),SetDataTip(STR_CC_WIKI_DESC,STR_NULL),SetPadding(0,0,0,15),
+		NWidget(NWID_SPACER),SetMinimalSize(0,6),SetFill(1,0),
+		NWidget(NWID_HORIZONTAL),
+			NWidget(WWT_TEXTBTN,COLOUR_BROWN,WID_LL_RULES),SetDataTip(STR_CC_RULES,STR_NULL),SetPadding(5),SetMinimalSize(0,20),
+			NWidget(NWID_SPACER),SetFill(0,1),
+		EndContainer(),
+		NWidget(WWT_TEXT,COLOUR_BEGIN,WID_LL_RULES_TXT),SetDataTip(STR_CC_RULES_DESC,STR_NULL),SetPadding(0,0,0,15),
+		NWidget(NWID_SPACER),SetMinimalSize(0,6),SetFill(1,0),
+		NWidget(NWID_HORIZONTAL),
+			NWidget(WWT_TEXTBTN,COLOUR_BROWN,WID_LL_SERVERS),SetDataTip(STR_CC_SERVERS,STR_NULL),SetPadding(5),SetMinimalSize(0,20),
+			NWidget(NWID_SPACER),SetFill(0,1),
+		EndContainer(),
+		NWidget(WWT_TEXT,COLOUR_BEGIN,WID_LL_SERVERS_TXT),SetDataTip(STR_CC_SERVERS_DESC,STR_NULL),SetPadding(0,0,0,15),
+		NWidget(NWID_SPACER),SetMinimalSize(0,6),SetFill(1,0),
+		NWidget(NWID_HORIZONTAL),
+			NWidget(WWT_TEXTBTN,COLOUR_BROWN,WID_LL_CONTACTS),SetDataTip(STR_CC_CONTACTS,STR_NULL),SetPadding(5),SetMinimalSize(0,20),
+			NWidget(NWID_SPACER),SetFill(0,1),
+		EndContainer(),
+		NWidget(WWT_TEXT,COLOUR_BEGIN, WID_LL_CONTACTS_TXT),SetDataTip(STR_CC_CONTACTS_DESC,STR_NULL),SetPadding(0,0,0,15),
+		NWidget(NWID_SPACER),SetMinimalSize(0,6),SetFill(1,0),	
+	EndContainer(),
+};
+static WindowDesc _links_list_desc(
+	WDP_CENTER, NULL, 0, 0,
+	WC_CC_LINKS_LIST, WC_NONE,
+	0,
+	_nested_links_list_widgets, lengthof(_nested_links_list_widgets)
+);
+
+void ShowUsefulLinksList()
+{
+	AllocateWindowDescFront<LinksListGui>(&_links_list_desc, 0);
+} 
diff -r 20318e34a0fa src/nc_intro_gui.h
--- /dev/null	Thu Jan 01 00:00:00 1970 +0000
+++ b/src/nc_intro_gui.h	Wed Jan 21 22:59:28 2015 +0000
@@ -0,0 +1,8 @@
+#ifndef COMC_INTRO_GUI_H
+#define COMC_INTRO_GUI_H
+#include "stdafx.h"
+
+void ShowAccountMenu();
+void ShowUsefulLinksList(); 
+
+#endif
diff -r 20318e34a0fa src/widgets/intro_widget.h
--- a/src/widgets/intro_widget.h	Wed Jan 21 21:08:31 2015 +0000
+++ b/src/widgets/intro_widget.h	Wed Jan 21 22:59:28 2015 +0000
@@ -33,6 +33,23 @@
 	WID_SGI_CONTENT_DOWNLOAD,      ///< Content Download button.
 	WID_SGI_AI_SETTINGS,           ///< AI button.
 	WID_SGI_EXIT,                  ///< Exit button.
+	WID_NC_HEADER,
+	WID_NC_COMMUNITY_DROPDOWN,
+	WID_NC_GROUP_DROPDOWN,
+	WID_NC_SERVERS,
+	
+	WID_SERVERS,
+	WID_NC_LIST,
+	WID_NC_LIST_END = WID_NC_LIST + 50, 
+	
+	WID_NC_ACCOUNT,
+	WID_NC_LINKS,
+};
+ 
+enum SelectGameQuery {
+	SGQ_CC_USER,
+	SGQ_CC_PASSWORD,
 };
 
+
 #endif /* WIDGETS_INTRO_WIDGET_H */
