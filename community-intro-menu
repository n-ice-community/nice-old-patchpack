# HG changeset patch
# Parent  8a569cf4a63960436c42cf132550477b03b103ac

diff -r 8a569cf4a639 source.list
--- a/source.list	Thu Apr 02 21:37:45 2015 +0100
+++ b/source.list	Thu Apr 02 22:28:21 2015 +0100
@@ -55,6 +55,7 @@
 mixer.cpp
 music.cpp
 nc_csettings.cpp
+nc_intro_gui.cpp
 network/network.cpp
 network/network_admin.cpp
 network/network_client.cpp
@@ -243,6 +244,7 @@
 mixer.h
 nc_csettings.h
 nc_receiver.h
+nc_intro_gui.h
 network/network.h
 network/network_admin.h
 network/network_base.h
diff -r 8a569cf4a639 src/intro_gui.cpp
--- a/src/intro_gui.cpp	Thu Apr 02 21:37:45 2015 +0100
+++ b/src/intro_gui.cpp	Thu Apr 02 22:28:21 2015 +0100
@@ -31,14 +31,60 @@
 #include "highscore.h"
 
 #include "widgets/intro_widget.h"
+#include "widgets/dropdown_type.h"
+#include "widgets/dropdown_func.h"
 
 #include "table/strings.h"
 #include "table/sprites.h"
 
+#include "network/network_func.h" //Required to connect to a server
+#include "window_func.h" //deletewindowbyID
+#include "console_func.h" //IConsolePrintF
+#include "settings_func.h" //saveconfig
+#include "nc_intro_gui.h"
+
 #include "safeguards.h"
 
+////////////////////////XXX
+void ShowSelectGameWindow();
+////////////////////////XXX
+void ReDraw()
+{
+	DeleteWindowByClass(WC_SELECT_GAME);
+	ShowSelectGameWindow();	
+}
 struct SelectGameWindow : public Window {
+	
+	DropDownList *BuildDropDownList(int widget, int *selected_index) const
+	{
+		DropDownList *list = NULL;
+		switch (widget) 
+		{
+			case WID_NC_COMMUNITY_DROPDOWN:
+				list = new DropDownList();
+				*selected_index = CSettings::get().Selected();
+				for (int i = 0; i < CSettings::get().Size(); i++) {
+					*list->Append() = new DropDownListCharStringItem(CSettings::get().GetCommunityName(i), i, false);
+				}
+			break;
+			case WID_NC_GROUP_DROPDOWN:
+			{
+				list = new DropDownList();
+				ServerGroupList* groups = CSettings::get().GetSelected()->GetGroups();
+				*selected_index = groups->SelectedIndex() +1 ;
+				*list->Append() = new DropDownListCharStringItem("None", 0, false);
+				for (uint i = 0; i < groups->Size(); i++) {
+					*list->Append() = new DropDownListCharStringItem(groups->Get(i)->display_name, i+1, false);
+				}
+			}
+			break;
+			default:
+			break;
+		}
+		return list;
+	}
 
+	SelectGameQuery query_widget;
 	SelectGameWindow(WindowDesc *desc) : Window(desc)
 	{
 		this->CreateNestedTree();
@@ -64,6 +110,13 @@
 	{
 		bool missing = _current_language->missing >= _settings_client.gui.missing_strings_threshold && !IsReleasedVersion();
 		this->GetWidget<NWidgetStacked>(WID_SGI_TRANSLATION_SELECTION)->SetDisplayedPlane(missing ? 0 : SZSP_NONE);
+		CSettings::get().RegistToWait(&ReDraw);
+	}
+	
+	virtual void OnPaint()
+	{
+		//this->DisableWidget(WID_NC_ORDER);
+		this->DrawWidgets();
 	}
 
 	virtual void DrawWidget(const Rect &r, int widget) const
@@ -73,9 +126,46 @@
 				SetDParam(0, _current_language->missing);
 				DrawStringMultiLine(r.left, r.right, r.top,  r.bottom, STR_INTRO_TRANSLATION, TC_FROMSTRING, SA_CENTER);
 				break;
+			//case WID_NC_COMMUNITY_DROPDOWN:
+			//	DrawString(r.left, r.right, r.top + 3, STR_NULL, TC_FROMSTRING, SA_CENTER);
+			//	break;
+			default:
+			{
+				Community* selected = CSettings::get().GetSelected();
+				if(selected == NULL) break;
+				ServerList* list = selected->GetServerList();
+				if(list == NULL) return;
+				if(widget >= WID_NC_LIST && widget <= WID_NC_LIST_END)
+				{
+					SetDParamStr(0, list->Get(widget - WID_NC_LIST)->display_name);
+					DrawString(r.left, r.right, r.top + 3, STR_JUST_RAW_STRING, TC_BLACK, SA_CENTER);
+				}else if(widget >= WID_NC_GROUPS && widget <= WID_NC_GROUPS_END)
+				{
+					SetDParamStr(0, CSettings::get().GetSelected()->GetServerGroup()->tabs_name[widget - WID_NC_GROUPS]);
+					DrawString(r.left, r.right, r.top + 3, STR_JUST_RAW_STRING , TC_BLACK, SA_CENTER);
+				}
+			}
+				break;
 		}
 	}
-
+	virtual void SetStringParameters(int widget) const
+	{
+		Community *selected = CSettings::get().GetSelected();
+		switch(widget)
+		{
+			case WID_NC_HEADER:
+				SetDParamStr(0, selected == NULL ? "" : CSettings::get().GetSelected()->display_name);
+			break;
+			case WID_NC_COMMUNITY_DROPDOWN:   
+				SetDParamStr(0, selected == NULL ? "" :CSettings::get().GetSelected()->display_name); 
+			break;
+			case WID_NC_GROUP_DROPDOWN:
+				SetDParamStr(0, selected == NULL || selected->GetGroups() == NULL ? "" :selected->GetGroups()->SelectedName());
+			break;
+			default:
+			break;
+		}
+	}
 	virtual void UpdateWidgetSize(int widget, Dimension *size, const Dimension &padding, Dimension *fill, Dimension *resize)
 	{
 		switch (widget) {
@@ -95,7 +185,21 @@
 			}
 		}
 	}
-
+	virtual void OnDropdownSelect(int widget, int index)
+	{
+		switch (widget) {
+			case WID_NC_COMMUNITY_DROPDOWN:
+				CSettings::get().SetSelected(index);
+				DeleteWindowByClass(WC_SELECT_GAME);
+				ShowSelectGameWindow();	
+			break;
+			case WID_NC_GROUP_DROPDOWN:
+				CSettings::get().GetSelected()->SetGroup(index-1);
+				DeleteWindowByClass(WC_SELECT_GAME);
+				ShowSelectGameWindow();	
+			break;
+		}
+	}
 	virtual void OnClick(Point pt, int widget, int click_count)
 	{
 #ifdef ENABLE_NETWORK
@@ -103,7 +207,7 @@
 		 * creation/load windows for the network server. */
 		if (IsInsideMM(widget, WID_SGI_GENERATE_GAME, WID_SGI_EDIT_SCENARIO + 1)) _is_network_server = false;
 #endif /* ENABLE_NETWORK */
-
+		extern void OpenBrowser(const char *url);
 		switch (widget) {
 			case WID_SGI_GENERATE_GAME:
 				if (_ctrl_pressed) {
@@ -144,10 +248,148 @@
 				break;
 			case WID_SGI_AI_SETTINGS:     ShowAIConfigWindow(); break;
 			case WID_SGI_EXIT:            HandleExitGameRequest(); break;
+			//community stuff
+			case WID_NC_ACCOUNT:
+				ShowAccountMenu();
+			break;
+			case WID_NC_LINKS:
+				ShowUsefulLinksList();
+			break;
+			case WID_NC_ADD_COMM:
+				ShowAddCommunity();
+			break;
+			default:
+				Community* selected = CSettings::get().GetSelected();
+				if(selected == NULL) break;
+				ServerList* list = selected->GetServerList();
+				if(widget >= WID_NC_LIST && widget <= WID_NC_LIST_END && list != NULL)
+				{
+					if(list == NULL) break;
+					printf("Clicked\n");
+					printf("%s\n", list->Get(widget - WID_NC_LIST)->ipv4);
+					if (_ctrl_pressed) {
+						NetworkClientConnectGame(list->Get(widget - WID_NC_LIST)->ipv4, COMPANY_NEW_COMPANY);
+					}
+					else{
+						NetworkClientConnectGame(list->Get(widget - WID_NC_LIST)->ipv4, COMPANY_SPECTATOR);
+					}
+				}else if(widget == WID_NC_COMMUNITY_DROPDOWN || widget == WID_NC_GROUP_DROPDOWN)
+				{
+					int selected;
+					DropDownList *list = this->BuildDropDownList(widget, &selected);
+					if (list != NULL) {
+						ShowDropDownList(this, list, selected, widget);
+					}
+				}
+			break;
 		}
 	}
 };
+NWidgetBase *MakeNCPart(int *biggest_index)
+{
+	Community* selected = CSettings::get().GetSelected();
+	ServerList* list = NULL;
+	ServerGroup* group = NULL;
+	NWidgetVertical *main = new NWidgetVertical;
+	if(selected == NULL) // There is no communities
+	{
+		NWidgetLeaf* cap = new NWidgetLeaf(WWT_CAPTION, COLOUR_BROWN, WID_NC_HEADER,0x0,STR_NULL);cap->SetDataTip(STR_NC_NO_COMMUNITY,STR_NULL);
+		cap->SetFill(1,0);
+		main->Add(cap);
+		NWidgetBackground* bg = new NWidgetBackground(WWT_PANEL, COLOUR_BROWN, WID_NC_SERVERS, NULL);
+		main->Add(bg);
+		NWidgetLeaf* button = new NWidgetLeaf(WWT_PUSHTXTBTN, COLOUR_ORANGE,WID_NC_ADD_COMM,0x0,STR_NULL);
+		button->SetDataTip(STR_NC_ADD_COMM,STR_NULL);button->SetMinimalSize(158,15);button->SetFill(1,0);
+		main->Add(button);
+		*biggest_index = WID_NC_ADD_COMM;
+		return main;
+	}
 
+	list = selected->GetServerList();
+	group = selected->GetServerGroup();
+
+	NWidgetLeaf* cap = new NWidgetLeaf(WWT_CAPTION, COLOUR_BROWN, WID_NC_HEADER,0x0,STR_NULL);cap->SetDataTip(STR_NC_COMMUNITY_SECTION,STR_NULL);
+	cap->SetFill(1,0);
+	main->Add(cap);
+	NWidgetBackground* bg = new NWidgetBackground(WWT_PANEL, COLOUR_BROWN,WID_NC_SERVERS, NULL);
+	main->Add(bg);
+	NWidgetVertical* ver = new NWidgetVertical(NC_EQUALSIZE);
+	bg->Add(ver);
+	NWidgetHorizontal* hor = new NWidgetHorizontal();
+	NWidgetLeaf* drop = new NWidgetLeaf(WWT_DROPDOWN, COLOUR_WHITE, WID_NC_COMMUNITY_DROPDOWN, 0x0, STR_NULL);drop->SetDataTip(STR_BLACK_RAW_STRING,STR_NULL);
+	drop->SetFill(1,0);drop->SetPadding(4,4,4,4);
+	NWidgetLeaf* addc_btn = new NWidgetLeaf(WWT_PUSHTXTBTN, COLOUR_WHITE,WID_NC_ADD_COMM,0x0,STR_NULL);
+	addc_btn->SetDataTip(STR_NC_ADD_COMM,STR_NULL);addc_btn->SetMinimalSize(0,15);
+	hor->Add(drop);hor->Add(addc_btn);
+	ver->Add(hor);
+	NWidgetLeaf* drop_mode = new NWidgetLeaf(WWT_DROPDOWN, COLOUR_WHITE, WID_NC_GROUP_DROPDOWN, 0x0, STR_NULL);
+	drop_mode->SetDataTip(STR_BLACK_RAW_STRING,STR_NULL);drop_mode->SetFill(1,0);drop_mode->SetPadding(4,4,4,4);
+	ver->Add(drop_mode);
+	ver->SetPadding(10,5,10,5);
+
+	if( !(list == NULL || list->Size() == 0))
+	{
+		if(group != NULL)
+		{
+			int line_counter = 0;
+			for(uint k = 0; k < group->tabs_name.Length(); k++)
+			{
+				NWidgetLeaf *cap = new NWidgetLeaf(WWT_CAPTION,group->tabs_colour[k],WID_NC_GROUPS +k,0x0,STR_NULL);
+				cap->SetFill(1,0);
+				ver->Add(cap);
+				NWidgetBackground* bg = new NWidgetBackground(WWT_PANEL,group->bg_colour[k],-1);
+				ver->Add(bg);
+				NWidgetVertical* cont = new NWidgetVertical(NC_EQUALSIZE);
+				bg->Add(cont);
+				line_counter = 0;
+				hor = new NWidgetHorizontal;
+				for(uint s = 0; s < group->servers_within_group[k]; s++)
+				{
+					if ( line_counter%5 == 0 && line_counter>0) 
+					{
+						cont->Add(hor);
+						hor = new NWidgetHorizontal();
+					}
+					NWidgetLeaf *leaf = new NWidgetLeaf(WWT_PUSHTXTBTN, group->server_colour[group->getServer(k,s)], WID_NC_LIST + list->GetPosByUid(group->getServerUid(k,s)), 0x0,STR_NULL);
+					leaf->SetMinimalSize(75, 15);
+					leaf->SetPadding(3,2,0,2);
+					hor->Add(leaf);
+					line_counter++;
+				}
+				cont->Add(hor);
+			}
+		}else
+		{
+			int line_counter = 0;
+			hor = new NWidgetHorizontal;
+			for(uint s = 0; s < list->Size(); s++,line_counter++)
+			{
+				if ( line_counter%5 == 0 && line_counter>0) 
+				{
+					ver->Add(hor);
+					hor = new NWidgetHorizontal();
+				}
+				NWidgetLeaf *leaf = new NWidgetLeaf(WWT_PUSHTXTBTN, COLOUR_ORANGE, WID_NC_LIST + s, 0x0,STR_NULL);
+				leaf->SetMinimalSize(75, 15);
+				leaf->SetPadding(3,2,0,2);
+				hor->Add(leaf);
+			}
+			ver->Add(hor);
+		}
+	}
+	
+	main->Add(new NWidgetBackground(WWT_PANEL, COLOUR_BROWN,-1, NULL));
+	hor = new NWidgetHorizontal(NC_EQUALSIZE);
+	NWidgetLeaf* acc_btn = new 	NWidgetLeaf(WWT_PUSHTXTBTN, COLOUR_ORANGE,WID_NC_ACCOUNT,0x0,STR_NULL);
+	acc_btn->SetDataTip(STR_NC_INTRO_ACCOUNT_DETAILS,STR_NULL);acc_btn->SetMinimalSize(158,15);acc_btn->SetFill(1,0);
+	NWidgetLeaf* link_btn = new NWidgetLeaf(WWT_PUSHTXTBTN, COLOUR_ORANGE,WID_NC_LINKS,0x0,STR_NULL);link_btn->SetDataTip(STR_NC_INTRO_LINKS,STR_NULL);
+	link_btn->SetMinimalSize(158,15);link_btn->SetFill(1,0);
+	hor->Add(acc_btn);
+	hor->Add(link_btn);
+	main->Add(hor);
+	*biggest_index = (WID_NC_LINKS);	
+	return main;
+}
 static const NWidgetPart _nested_select_game_widgets[] = {
 	NWidget(WWT_CAPTION, COLOUR_BROWN), SetDataTip(STR_INTRO_CAPTION, STR_NULL),
 	NWidget(WWT_PANEL, COLOUR_BROWN),
@@ -248,6 +490,7 @@
 	NWidget(NWID_SPACER), SetMinimalSize(0, 8),
 
 	EndContainer(),
+	NWidgetFunction(MakeNCPart),
 };
 
 static WindowDesc _select_game_desc(
diff -r 8a569cf4a639 src/lang/english.txt
--- a/src/lang/english.txt	Thu Apr 02 21:37:45 2015 +0100
+++ b/src/lang/english.txt	Thu Apr 02 22:28:21 2015 +0100
@@ -5032,3 +5032,21 @@
 
 # Town gui extended
 STR_TOWN_VIEW_GROWTH                                            :{BLACK}GR: {ORANGE}{COMMA}{BLACK} next: {ORANGE}{COMMA} {BLACK} RH: {ORANGE}{COMMA} {BLACK}flag {ORANGE}{COMMA}  {BLACK}Fund: {ORANGE}{COMMA}{SILVER}m
+
+# intro gui
+STR_NC_INTRO_ACCOUNT_DETAILS                                    :{BLACK}Account details
+STR_NC_INTRO_LINKS                                              :{BLACK}Useful links
+STR_NC_NO_COMMUNITY                                             :{BLACK}No community found.
+STR_NC_COMMUNITY_SECTION                                        :{BLACK}Community Section
+STR_NC_ADD_COMM                                                 :{BLACK}Add Community
+STR_NC_COMMUNITY                                                :{BLACK}Community
+STR_NC_LINK                                                     :{BLACK}Link
+STR_NC_CONFIRM                                                  :{BLACK}Confirm
+STR_NC_ACCOUNT_DETAILS_CAPTION                                  :{BLACK}{RAW_STRING}'s Account Details
+STR_NC_LINKS_CAPTION                                            :{BLACK}{RAW_STRING}'s Useful Links
+
+STR_NC_USER                                                     :{WHITE}Username:{NBSP}{NBSP}
+STR_NC_PASSWORD                                                 :{WHITE}Password:{NBSP}{NBSP}
+STR_NC_SET                                                      :{WHITE}Set...
+STR_NC_REGULAR_USER                                             :{BLACK}Regular User Account:
+STR_NC_ADMIN_USER                                               :{BLACK}Admin User Account:
diff -r 8a569cf4a639 src/nc_intro_gui.cpp
--- /dev/null	Thu Jan 01 00:00:00 1970 +0000
+++ b/src/nc_intro_gui.cpp	Thu Apr 02 22:28:21 2015 +0100
@@ -0,0 +1,372 @@
+#include "nc_intro_gui.h"
+#include "nc_csettings.h"
+#include "strings_func.h"
+#include "settings_type.h"
+#include "table/strings.h"
+#include "error.h"
+#include "rev.h"
+#include "settings_func.h" //saveconfig
+#include "textbuf_gui.h"
+#include "stdafx.h"
+
+#include "network/network.h"
+#include "network/network_func.h"
+#include "network/network_base.h"
+#include "network/network_type.h"
+
+#include "strings_func.h"
+
+#include "window_gui.h"
+#include "widget_type.h"
+#include "window_func.h"
+#include "querystring_gui.h"
+/******
+	Intro Gui Support Windows
+*/
+/*
+	ACCOUNT
+*/
+enum AccountMenuWidgets
+{
+	WID_AM_CAPTION,
+	WID_AM_USER_SET,
+	WID_AM_PASSWORD_SET,
+	WID_AM_AUSER_SET,
+	WID_AM_APASSWORD_SET,
+	WID_AM_SAVE,
+};
+class AccountMenuGui : public Window
+{
+	QueryString name_editbox; 
+	QueryString pass_editbox;
+	QueryString aname_editbox; 
+	QueryString apass_editbox;
+	public:
+	AccountMenuGui(WindowDesc *desc, int window_number) : Window(desc),name_editbox(15),pass_editbox(15),aname_editbox(15),apass_editbox(15)
+	{
+		this->querystrings[WID_AM_USER_SET] = &this->name_editbox;
+		this->querystrings[WID_AM_PASSWORD_SET] = &this->pass_editbox;
+		this->querystrings[WID_AM_AUSER_SET] = &this->aname_editbox;
+		this->querystrings[WID_AM_APASSWORD_SET] = &this->apass_editbox;
+		this->InitNested(window_number);
+		this->SetFocusedWidget(WID_AM_USER_SET);
+	}
+	virtual void DrawWidget(const Rect &r, int widget) const
+	{
+	}
+	virtual void SetStringParameters(int widget) const
+	{
+		Community* selected = CSettings::get().GetSelected();
+		if(selected == NULL)
+		{
+			NOT_REACHED();
+			return; /// XXX Can't be here
+		}
+		switch (widget) 
+		{
+			case WID_AM_CAPTION:
+				SetDParamStr(0,selected->display_name);
+			break;
+			case WID_AM_USER_SET:
+				SetDParamStr(0,selected->username == NULL ? "" : selected->username);
+			break;
+			case WID_AM_PASSWORD_SET:
+				SetDParamStr(0,selected->password == NULL ? "" : selected->password );
+			break;
+			case WID_AM_AUSER_SET:
+				SetDParamStr(0,selected->admin == NULL ? "" : selected->admin);
+			break;
+			case WID_AM_APASSWORD_SET:
+				SetDParamStr(0,selected->adminpass == NULL ? "" : selected->adminpass);
+			break;
+			case WID_AM_SAVE:
+			break;
+			default:
+				NOT_REACHED();
+			break;
+		}
+	}
+	virtual void OnClick(Point pt, int widget, int click_count)
+	{
+		switch (widget)
+		{
+			case WID_AM_SAVE:
+			{
+				Community* selected = CSettings::get().GetSelected();
+				if(selected == NULL)
+				{
+					NOT_REACHED();
+					return;
+				}
+				selected->username = stredup(name_editbox.GetText(),NULL);
+				selected->password = stredup(pass_editbox.GetText(),NULL);
+				selected->admin = stredup(aname_editbox.GetText(),NULL);
+				selected->adminpass = stredup(apass_editbox.GetText(),NULL);
+				CSettings::get().SaveCommunities();
+			}
+			default:
+			break;
+		}
+	}
+};
+static const NWidgetPart _nested_account_menu_widgets[] = {
+	NWidget(NWID_HORIZONTAL),
+		NWidget(WWT_CLOSEBOX, COLOUR_BROWN),
+		NWidget(WWT_CAPTION, COLOUR_BROWN,WID_AM_CAPTION), SetDataTip(STR_NC_ACCOUNT_DETAILS_CAPTION , STR_NULL),
+	EndContainer(),
+	NWidget(WWT_PANEL, COLOUR_GREY),
+	NWidget(NWID_VERTICAL),SetPadding(5),
+		NWidget(WWT_TEXT,COLOUR_ORANGE),SetDataTip(STR_NC_REGULAR_USER,STR_NULL),
+		NWidget(NWID_HORIZONTAL),SetPadding(0,0,0,20),
+			NWidget(WWT_TEXT,COLOUR_ORANGE),SetDataTip(STR_NC_USER,STR_NULL),
+			NWidget(WWT_EDITBOX, COLOUR_GREY, WID_AM_USER_SET),SetDataTip(STR_BLACK_RAW_STRING,STR_NULL), SetMinimalSize(256, 12), SetFill(1, 1), SetPadding(2, 2, 2, 2),
+		EndContainer(),
+		NWidget(NWID_HORIZONTAL),SetPadding(5,0,0,20),
+			NWidget(WWT_TEXT,COLOUR_ORANGE),SetDataTip(STR_NC_PASSWORD,STR_NULL),
+			NWidget(WWT_EDITBOX, COLOUR_GREY, WID_AM_PASSWORD_SET), SetDataTip(STR_BLACK_RAW_STRING,STR_NULL),SetMinimalSize(256, 12), SetFill(1, 1), SetPadding(2, 2, 2, 2),
+		EndContainer(),
+	EndContainer(),
+	NWidget(WWT_PANEL, COLOUR_GREY),SetFill(1,0),
+	NWidget(NWID_VERTICAL),SetPadding(5),
+		NWidget(WWT_TEXT,COLOUR_ORANGE),SetDataTip(STR_NC_ADMIN_USER,STR_NULL),
+		NWidget(NWID_HORIZONTAL),SetPadding(0,0,0,20),
+			NWidget(WWT_TEXT,COLOUR_ORANGE),SetDataTip(STR_NC_USER,STR_NULL),
+			NWidget(WWT_EDITBOX, COLOUR_GREY, WID_AM_AUSER_SET), SetDataTip(STR_BLACK_RAW_STRING,STR_NULL), SetMinimalSize(256, 12), SetFill(1, 1), SetPadding(2, 2, 2, 2),
+		EndContainer(),
+		NWidget(NWID_HORIZONTAL),SetPadding(5,0,0,20),
+			NWidget(WWT_TEXT,COLOUR_ORANGE),SetDataTip(STR_NC_PASSWORD,STR_NULL),
+			NWidget(WWT_EDITBOX, COLOUR_GREY, WID_AM_APASSWORD_SET),SetDataTip(STR_BLACK_RAW_STRING,STR_NULL), SetMinimalSize(256, 12), SetFill(1, 1), SetPadding(2, 2, 2, 2),
+		EndContainer(),
+		NWidget(WWT_TEXTBTN,COLOUR_BROWN,WID_AM_SAVE),SetDataTip(STR_SAVE_PRESET_SAVE,STR_NULL),SetPadding(5),
+	EndContainer(),
+};
+static WindowDesc _account_menu_desc(
+	WDP_CENTER, NULL, 0, 0,
+	WC_NC_ACCOUNT_MENU, WC_NONE,
+	0,
+	_nested_account_menu_widgets, lengthof(_nested_account_menu_widgets)
+);
+
+void ShowAccountMenu()
+{
+	AllocateWindowDescFront<AccountMenuGui>(&_account_menu_desc, 0);
+}
+/*
+	LINKS
+*/
+enum LinksListWidgets
+{
+	WID_LL_CAPTION,
+	WID_LL_WEBSITE,
+	WID_LL_WEBSITE_TXT,
+	WID_LL_FORUM,
+	WID_LL_FORUM_TXT,
+	WID_LL_WIKI,
+	WID_LL_WIKI_TXT,
+	WID_LL_RULES,
+	WID_LL_RULES_TXT,
+	WID_LL_SERVERS,
+	WID_LL_SERVERS_TXT,
+	WID_LL_CONTACTS,
+	WID_LL_CONTACTS_TXT,	
+};
+class LinksListGui : public Window
+{
+	public:
+	LinksListGui(WindowDesc *desc, int window_number) : Window(desc)
+	{
+		this->InitNested(window_number);
+	}
+	virtual void DrawWidget(const Rect &r, int widget) const
+	{
+	}
+	virtual void OnClick(Point pt, int widget, int click_count)
+	{
+		extern void OpenBrowser(const char *url);
+		switch(widget)
+		{	
+		  /*case WID_LL_WEBSITE:
+				if(_settings_client.gui.community == Community::N_ICE)
+					OpenBrowser("http://www.n-ice.org/openttd");
+				else
+					OpenBrowser("http://openttd.btpro.nl");
+			break;
+	      case WID_LL_FORUM:
+				if(_settings_client.gui.community == Community::N_ICE)
+					OpenBrowser("http://www.n-ice.org/openttd/forum/index.php");
+				else
+					OpenBrowser("http://openttd.btpro.nl/index.php/forum/index");
+	      break;
+	      case WID_LL_WIKI:
+				if(_settings_client.gui.community == Community::N_ICE)
+					OpenBrowser("http://wiki.x-base.org/wakka.php?wakka=OpenTTD/Rules");
+				else
+					OpenBrowser("http://openttd.btpro.nl/wiki/index.php/Main_Page");
+	      break;
+			case WID_LL_RULES:
+				if(_settings_client.gui.community == Community::N_ICE)
+					OpenBrowser("http://n-ice.org/openttd/rules.php");
+				else
+					OpenBrowser("http://openttd.btpro.nl/index.php/forum/11-server-rules/10-server-rules");
+			break;
+	      case WID_LL_SERVERS:
+				if(_settings_client.gui.community == Community::N_ICE)
+					OpenBrowser("http://openttd.n-ice.org/servers.php");
+				else
+					OpenBrowser("http://openttd.btpro.nl/index.php?option=com_content&view=article&id=79&Itemid=514");
+			break;
+	      case WID_LL_CONTACTS:	
+				if(_settings_client.gui.community == Community::N_ICE)
+					OpenBrowser("http://openttd.n-ice.org/contact.php");
+				else
+					OpenBrowser("http://openttd.btpro.nl/index.php?option=com_content&view=article&id=102&Itemid=560");
+			break;*/
+			default:
+			break;
+		}
+	}
+	
+	virtual void SetStringParameters(int widget) const
+	{
+		Community* selected = CSettings::get().GetSelected();
+		if(selected == NULL)
+			return;
+		switch (widget) 
+		{
+			case WID_LL_RULES_TXT:
+			case WID_LL_SERVERS:
+			case WID_LL_CONTACTS_TXT:
+			case WID_LL_WIKI_TXT:
+ 			case WID_LL_WIKI:
+			case WID_LL_FORUM:
+			case WID_LL_WEBSITE:
+			case WID_LL_CAPTION:
+			{
+				SetDParamStr(0,selected->display_name);
+			}
+			break;
+			default:
+			break;
+		}
+	}
+	
+};
+static const NWidgetPart _nested_links_list_widgets[] = {
+	NWidget(NWID_HORIZONTAL),
+		NWidget(WWT_CLOSEBOX, COLOUR_BROWN),
+		NWidget(WWT_CAPTION, COLOUR_BROWN,WID_LL_CAPTION), SetDataTip(STR_NC_LINKS_CAPTION, STR_NULL),
+	EndContainer(),
+	/*NWidget(WWT_PANEL, COLOUR_GREY),
+	NWidget(NWID_VERTICAL),SetPadding(7),
+		NWidget(NWID_HORIZONTAL),
+			NWidget(WWT_TEXTBTN,COLOUR_BROWN,WID_LL_WEBSITE),SetDataTip(STR_NC_WEBSITE,STR_NULL),SetPadding(5),SetMinimalSize(0,20),
+			NWidget(NWID_SPACER),SetFill(0,1),
+		EndContainer(),
+		NWidget(WWT_TEXT,COLOUR_BEGIN,WID_LL_WEBSITE_TXT),SetDataTip(STR_NC_WEBSITE_DESC,STR_NULL),SetPadding(0,0,0,15),
+		NWidget(NWID_SPACER),SetMinimalSize(0,6),SetFill(1,0),
+		NWidget(NWID_HORIZONTAL),
+			NWidget(WWT_TEXTBTN,COLOUR_BROWN,WID_LL_FORUM),SetDataTip(STR_NC_FORUM,STR_NULL),SetPadding(5),SetMinimalSize(0,20),
+			NWidget(NWID_SPACER),SetFill(0,1),
+		EndContainer(),
+		NWidget(WWT_TEXT,COLOUR_BEGIN,WID_LL_FORUM_TXT),SetDataTip(STR_NC_FORUM_DESC,STR_NULL),SetPadding(0,0,0,15),
+		NWidget(NWID_SPACER),SetMinimalSize(0,6),SetFill(1,0),
+		NWidget(NWID_HORIZONTAL),
+			NWidget(WWT_TEXTBTN,COLOUR_BROWN,WID_LL_WIKI),SetDataTip(STR_NC_WIKI,STR_NULL),SetPadding(5),SetMinimalSize(0,20),
+			NWidget(NWID_SPACER),SetFill(0,1),
+		EndContainer(),
+		NWidget(WWT_TEXT,COLOUR_BEGIN,WID_LL_WIKI_TXT),SetDataTip(STR_NC_WIKI_DESC,STR_NULL),SetPadding(0,0,0,15),
+		NWidget(NWID_SPACER),SetMinimalSize(0,6),SetFill(1,0),
+		NWidget(NWID_HORIZONTAL),
+			NWidget(WWT_TEXTBTN,COLOUR_BROWN,WID_LL_RULES),SetDataTip(STR_NC_RULES,STR_NULL),SetPadding(5),SetMinimalSize(0,20),
+			NWidget(NWID_SPACER),SetFill(0,1),
+		EndContainer(),
+		NWidget(WWT_TEXT,COLOUR_BEGIN,WID_LL_RULES_TXT),SetDataTip(STR_NC_RULES_DESC,STR_NULL),SetPadding(0,0,0,15),
+		NWidget(NWID_SPACER),SetMinimalSize(0,6),SetFill(1,0),
+		NWidget(NWID_HORIZONTAL),
+			NWidget(WWT_TEXTBTN,COLOUR_BROWN,WID_LL_SERVERS),SetDataTip(STR_NC_SERVERS,STR_NULL),SetPadding(5),SetMinimalSize(0,20),
+			NWidget(NWID_SPACER),SetFill(0,1),
+		EndContainer(),
+		NWidget(WWT_TEXT,COLOUR_BEGIN,WID_LL_SERVERS_TXT),SetDataTip(STR_NC_SERVERS_DESC,STR_NULL),SetPadding(0,0,0,15),
+		NWidget(NWID_SPACER),SetMinimalSize(0,6),SetFill(1,0),
+		NWidget(NWID_HORIZONTAL),
+			NWidget(WWT_TEXTBTN,COLOUR_BROWN,WID_LL_CONTACTS),SetDataTip(STR_NC_CONTACTS,STR_NULL),SetPadding(5),SetMinimalSize(0,20),
+			NWidget(NWID_SPACER),SetFill(0,1),
+		EndContainer(),
+		NWidget(WWT_TEXT,COLOUR_BEGIN, WID_LL_CONTACTS_TXT),SetDataTip(STR_NC_CONTACTS_DESC,STR_NULL),SetPadding(0,0,0,15),
+		NWidget(NWID_SPACER),SetMinimalSize(0,6),SetFill(1,0),	
+	EndContainer(),*/
+};
+static WindowDesc _links_list_desc(
+	WDP_CENTER, NULL, 0, 0,
+	WC_NC_LINKS_LIST, WC_NONE,
+	0,
+	_nested_links_list_widgets, lengthof(_nested_links_list_widgets)
+);
+
+void ShowUsefulLinksList()
+{
+	AllocateWindowDescFront<LinksListGui>(&_links_list_desc, 0);
+} 
+/*
+	ADD COMMUNITY
+*/
+enum AddCommunityWidgets
+{
+	WID_AC_CAPTION,
+	WID_AC_NAME,
+	WID_AC_LINK,
+	WID_AC_CONFIRM,	
+};
+class AddCommunityGui : public Window
+{
+	QueryString name_editbox; ///< Message editbox.
+	QueryString link_editbox;    ///< Editbox.
+	public:
+	AddCommunityGui(WindowDesc *desc, int window_number) : Window(desc), name_editbox(50),link_editbox(200) 
+	{
+		this->querystrings[WID_AC_NAME] = &this->name_editbox;
+		this->querystrings[WID_AC_LINK] = &this->link_editbox;
+		this->InitNested(window_number);
+		this->SetFocusedWidget(WID_AC_NAME);
+	}
+	virtual void DrawWidget(const Rect &r, int widget) const
+	{
+	}
+	virtual void OnClick(Point pt, int widget, int click_count)
+	{
+		switch(widget)
+		{
+			case WID_AC_CONFIRM:
+				CSettings::get().AddCommunity(name_editbox.GetText(),link_editbox.GetText());
+			break;
+		}
+	}
+	
+
+	
+};
+static const NWidgetPart _nested_add_comm_widgets[] = {
+	NWidget(NWID_HORIZONTAL),
+		NWidget(WWT_CLOSEBOX, COLOUR_ORANGE),
+		NWidget(WWT_CAPTION, COLOUR_ORANGE,WID_LL_CAPTION), SetDataTip(STR_NC_ADD_COMM, STR_NULL),SetMinimalSize(300,20),
+	EndContainer(),
+	NWidget(WWT_PANEL, COLOUR_WHITE),
+	NWidget(NWID_VERTICAL),SetPadding(7),
+		NWidget(WWT_TEXT,COLOUR_BEGIN),SetDataTip(STR_NC_COMMUNITY,STR_NULL),SetPadding(5),SetMinimalSize(0,20),
+		NWidget(WWT_EDITBOX, COLOUR_GREY, WID_AC_NAME), SetMinimalSize(256, 12), SetFill(1, 1), SetPadding(2, 2, 2, 2),
+		NWidget(WWT_TEXT,COLOUR_BEGIN),SetDataTip(STR_NC_LINK,STR_NULL),SetPadding(5),SetMinimalSize(0,20),
+		NWidget(WWT_EDITBOX, COLOUR_GREY, WID_AC_LINK), SetMinimalSize(256, 12), SetFill(1, 1), SetPadding(2, 2, 2, 2),
+		NWidget(WWT_TEXTBTN,COLOUR_ORANGE,WID_AC_CONFIRM),SetDataTip(STR_NC_CONFIRM,STR_NULL),SetPadding(5),SetMinimalSize(0,20),
+	EndContainer(),
+};
+static WindowDesc _add_comm_desc(
+	WDP_CENTER, NULL, 0, 0,
+	WC_NC_ADD_COMM, WC_NONE,
+	0,
+	_nested_add_comm_widgets, lengthof(_nested_add_comm_widgets)
+);
+
+void ShowAddCommunity()
+{
+	AllocateWindowDescFront<AddCommunityGui>(&_add_comm_desc, 0);
+} 
diff -r 8a569cf4a639 src/nc_intro_gui.h
--- /dev/null	Thu Jan 01 00:00:00 1970 +0000
+++ b/src/nc_intro_gui.h	Thu Apr 02 22:28:21 2015 +0100
@@ -0,0 +1,9 @@
+#ifndef COMC_INTRO_GUI_H
+#define COMC_INTRO_GUI_H
+#include "stdafx.h"
+
+void ShowAccountMenu();
+void ShowUsefulLinksList(); 
+void ShowAddCommunity(); 
+
+#endif
diff -r 8a569cf4a639 src/widgets/intro_widget.h
--- a/src/widgets/intro_widget.h	Thu Apr 02 21:37:45 2015 +0100
+++ b/src/widgets/intro_widget.h	Thu Apr 02 22:28:21 2015 +0100
@@ -33,6 +33,25 @@
 	WID_SGI_CONTENT_DOWNLOAD,      ///< Content Download button.
 	WID_SGI_AI_SETTINGS,           ///< AI button.
 	WID_SGI_EXIT,                  ///< Exit button.
+	WID_NC_HEADER,
+	WID_NC_ADD_COMM,
+	WID_NC_COMMUNITY_DROPDOWN,
+	WID_NC_GROUP_DROPDOWN,
+	WID_NC_SERVERS,
+	
+	WID_NC_LIST,
+	WID_NC_LIST_END = WID_NC_LIST + 50, 
+	WID_NC_GROUPS,
+	WID_NC_GROUPS_END = WID_NC_GROUPS + 50, 
+	
+	WID_NC_ACCOUNT,
+	WID_NC_LINKS,
+};
+ 
+enum SelectGameQuery {
+	SGQ_NC_USER,
+	SGQ_NC_PASSWORD,
 };
 
+
 #endif /* WIDGETS_INTRO_WIDGET_H */
diff -r 8a569cf4a639 src/window_type.h
--- a/src/window_type.h	Thu Apr 02 21:37:45 2015 +0100
+++ b/src/window_type.h	Thu Apr 02 22:28:21 2015 +0100
@@ -682,6 +682,18 @@
 	 *   - 0 = #SavePresetWidgets
 	 */
 	WC_SAVE_PRESET,
+	/*
+	* Account Menu window
+	*/
+	WC_NC_ACCOUNT_MENU,
+	/*
+	* Links list window
+	*/
+	WC_NC_LINKS_LIST,
+	/*
+	* Add Community window
+	*/
+	WC_NC_ADD_COMM,
 
 	WC_INVALID = 0xFFFF, ///< Invalid window.
 };
